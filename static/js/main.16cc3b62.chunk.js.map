{"version":3,"sources":["components/Section/Section.js","components/Statistics/Statistics.js","components/FeedbackOptions/FeedbackOptions.js","components/Notification/Notification.js","App.js","index.js"],"names":["Section","children","title","className","Statistics","good","neutral","bad","total","positivePercentage","FeedbackOptions","options","onLeaveFeedback","map","option","idx","type","name","onClick","Notification","message","App","state","handleIncrement","e","target","setState","prevState","this","Math","round","countTotalFeedback","positivTotal","totalPositiv","keys","Object","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4RAQiBA,EAND,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,MAAb,OACZ,sBAAKC,UAAU,UAAf,UACI,6BAAKD,IACJD,MCUOG,EAXG,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,mBAA9B,OACb,cAAC,EAAD,CAASP,MAAQ,aAAjB,SACF,gCACE,uCAAUG,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,KACX,oDAAuBC,EAAvB,aCGSC,EAVS,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,gBAAZ,OACtB,cAAC,EAAD,CAASV,MAAM,wBAAf,SACGS,EAAQE,KAAI,SAACC,EAAQC,GAAT,OACX,wBAAkBC,KAAK,SAASC,KAAMH,EAAQI,QAASN,EAAvD,SACGE,GADUC,SCFJI,EAHM,SAAC,GAAD,IAAEC,EAAF,EAAEA,QAAF,OACrB,4BAAIA,KCuDWC,E,4MAlDbC,MAAQ,CACNjB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPgB,gBAAkB,SAACC,GACjB,IAAQP,EAASO,EAAEC,OAAXR,KACR,EAAKS,UAAS,SAACC,GAAD,sBAAmBV,EAAOU,EAAUV,GAAQ,O,wDAG5D,WACE,MAA+BW,KAAKN,MACpC,OADA,EAAQjB,KAAR,EAAcC,QAAd,EAAuBC,M,0BAIzB,WACE,IAAQF,EAASuB,KAAKN,MAAdjB,KACR,OAAOwB,KAAKC,MAAOzB,EAAOuB,KAAKG,qBAAwB,O,6CAGzD,c,oBACA,WACE,IAAMvB,EAAQoB,KAAKG,qBACbC,EAAeJ,KAAKK,eAAiBL,KAAKK,eAAiB,EACjE,EAA+BL,KAAKN,MAA5BjB,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IACjB2B,EAAOC,OAAOD,KAAKN,KAAKN,OAE9B,OACE,qCACE,cAAC,EAAD,CACEX,QAASuB,EACTtB,gBAAiBgB,KAAKL,kBAEvBf,EACC,cAAC,EAAD,CACEH,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,mBAAoBuB,IAGtB,cAAC,EAAD,CAAcZ,QAAQ,6B,GA5CdgB,aCDlBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.16cc3b62.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Section = ({ children, title }) => (\r\n    <div className=\"section\">\r\n        <h2>{title}</h2>\r\n        {children}</div>\r\n  );\r\n  \r\n  export default Section;","import React from \"react\";\r\n\r\nimport Section from \"components/Section\";\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => (\r\n      <Section title = \"Statistics\">\r\n    <div>\r\n      <p>Good: {good}</p>\r\n      <p>Neutral: {neutral}</p>\r\n      <p>Bad: {bad}</p>\r\n      <p>Total: {total}</p>\r\n      <p>Positive feedback: {positivePercentage}%</p>\r\n    </div>\r\n    </Section>\r\n  );\r\n export default Statistics","import React from \"react\";\r\n\r\nimport Section from \"components/Section\";\r\n\r\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => (\r\n  <Section title=\"Please leave feedback\">\r\n    {options.map((option, idx) => (\r\n      <button key={idx} type=\"button\" name={option} onClick={onLeaveFeedback}>\r\n        {option}\r\n      </button>\r\n    ))}\r\n  </Section>\r\n);\r\n\r\nexport default FeedbackOptions;\r\n","import React from \"react\";\r\n\r\nconst Notification = ({message}) =>\r\n<p>{message}</p>\r\n\r\nexport default Notification","import React, { Component } from \"react\";\n\nimport \"./App.css\";\nimport Statistics from \"components/Statistics\";\nimport FeedbackOptions from \"components/FeedbackOptions\";\nimport Notification from \"components/Notification\";\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  handleIncrement = (e) => {\n    const { name } = e.target;\n    this.setState((prevState) => ({ [name]: prevState[name] + 1 }));\n  };\n\n  countTotalFeedback() {\n    const { good, neutral, bad } = this.state;\n    return good + neutral + bad;\n  }\n\n  totalPositiv() {\n    const { good } = this.state;\n    return Math.round((good / this.countTotalFeedback()) * 100);\n  }\n\n  countPositiveFeedbackPercentage() {}\n  render() {\n    const total = this.countTotalFeedback();\n    const positivTotal = this.totalPositiv() ? this.totalPositiv() : 0;\n    const { good, neutral, bad } = this.state;\n    const keys = Object.keys(this.state);\n\n    return (\n      <>\n        <FeedbackOptions\n          options={keys}\n          onLeaveFeedback={this.handleIncrement}\n        />\n        {total ? (\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={total}\n            positivePercentage={positivTotal}\n          />\n        ) : (\n          <Notification message=\"No feedback given\" />\n        )}\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}